#!/usr/bin/env ruby
require 'json'
require_relative '../lib/help_parser'

def index
  ARGV.shift.to_i
rescue
  0
end

PN = File.basename($0)

# duplicate in usage
HELP0 = <<~HELP
  Usage:
    #{PN} [:options+] <args> <args>
    #{PN} [:options+] <args+>
  Options:
    -n --number=NUMBER 1
  Types:
    NUMBER /^\\d+$/
HELP

# spelling :optoins
HELP1 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1> <arg2>
    #{PN} [:optoins+] <args>+
  Options:
    -n --number=NUMBER 1
  Types:
    NUMBER /^\\d+$/
HELP

# format <args+> instead of <args>+
HELP2 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1> <arg2>
    #{PN} [:options+] <args+>
  Options:
    -n --number=NUMBER 1
  Types:
    NUMBER /^\\d+$/
HELP

# duplicate flag number
HELP3 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1> <arg2>
    #{PN} [:options+] <args>+
  Options:
    -n --number=NUMBER 1
    --number
  Types:
    NUMBER /^\\d+$/
HELP

# default abc not NUMBER
HELP4 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1> <arg2>
    #{PN} [:options+] <args>+
  Options:
    -n --number=NUMBER abc
  Types:
    NUMBER /^\\d+$/
HELP

# bad type spec
HELP5 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1> <arg2>
    #{PN} [:options+] <args>+
  Options:
    -n --number=NUMBER abc
  Types:
    NUMBER ^\\d+$
HELP

# unbalaced
HELP6 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1> <arg2>
    #{PN} [:options+] [<args>+
  Options:
    -n --number=NUMBER 123
  Types:
    NUMBER /^\\d+$/
HELP

# bad option spec
HELP7 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1> <arg2>
    #{PN} [:options+] <args>+
  Options:
    --n --number=NUMBER 123
  Types:
    NUMBER /^\\d+$/
HELP

# unused Extra
HELP8 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1> <arg2>
    #{PN} [:options+] <args>+
  Options:
    -n --number=NUMBER 123
  Extra:
    --extra
  Types:
    NUMBER /^\\d+$/
HELP

# Extra cases not given
HELP9 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1> <arg2>
    #{PN} [:extra+] <args>+
  Options:
    -n --number=NUMBER 123
  Extra:
  Types:
    NUMBER /^\\d+$/
HELP

# extraneous spaces
HELP10 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1> <arg2>
    #{PN} [:extra+] <args>+
  Options:
    -n --number=NUMBER 123
  Extra:
    --extra
          \t
  Types:
    NUMBER /^\\d+$/
HELP

# inconsitent arg1
HELP11 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1=PHONE> <arg2>
    #{PN} [:extra+] <arg1=NUMBER>
  Options:
    -n --number=NUMBER 123
  Extra:
    --extra
  Types:
    NUMBER /^\\d+$/
    PHONE  /^\\d+-\\d+-\\d+$/
HELP

# bad regex for PHONE
HELP12 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1=NUMBER> <arg2=PHONE>
    #{PN} [:extra+] <arg1=NUMBER>
  Options:
    -n --number=NUMBER 123
  Extra:
    --extra
  Types:
    NUMBER /^\\d+$/
    PHONE  /^[]$/
HELP

# missing type definition for EXTRA
HELP13 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1=EXTRA> <arg2=PHONE>
    #{PN} [:extra+] <arg1=EXTRA>
  Options:
    -n --number=NUMBER 123
  Extra:
    --extra
  Types:
    NUMBER /^\\d+$/
    PHONE  /^\\d+-\\d+-\\d+$/
HELP

# duplicate flag n
HELP14 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1> <arg2>
    #{PN} [:options+] <args>+
  Options:
    -n --number=NUMBER 1
    --n
  Types:
    NUMBER /^\\d+$/
HELP

# duplicate exclusive flags(a,b)
HELP15 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1>
  Options:
    -a
    -b
  Exclusive:
    a b
    b a
HELP

# But this one is good!
HELP16 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1>
  Options:
    --ab
    --bc
    -a
    -c
  Exclusive:
    ab c
    bc a
  # Note: #
  # This one is actually OK!
HELP

# --long -s \tOK? No!
HELP17 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1>
  Options:
    --abc -a
    --xyz -x
HELP

# Accidental double exclusive
HELP18 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1>
  Options:
    -a --abc
    -x --xyz
  Exclusive:
    abc abc
HELP

# Accidental double inclusive
HELP19 = <<~HELP
  Usage:
    #{PN} [:options+] <arg1>
  Options:
    -a --abc
    -x --xyz
  Inclusive:
    xyz xyz
HELP

# Lists(Array) vs Value arguments
HELP20 = <<~HELP
  Usage:
    #{PN} value <arg>
    #{PN} list <arg>+
HELP

HELPS = [
  HELP0, HELP1, HELP2, HELP3, HELP4, HELP5,
  HELP6, HELP7, HELP8, HELP9, HELP10,
  HELP11, HELP12, HELP13, HELP14, HELP15,
  HELP16, HELP17, HELP18, HELP19, HELP20
]

OPTIONS = HelpParser['1.2.3', HELPS[index], [PN, '--help', '-h']]
puts OPTIONS.to_h.to_json
