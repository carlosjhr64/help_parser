#!/usr/bin/env ruby
require 'test/unit'
require 'colorize'

class TestRuboCop < Test::Unit::TestCase
  RUBOCOP = 'rubocop --format quiet --config .rubocop.yml'
  def test_rubycop
    failed,threads = [],[]
    `git ls-files`.lines.map(&:chomp)
    .select{/\.rb$/.match?_1 or (!/\.\w*$/.match?_1 and _bang_ruby?_1)}
    .each do |fn|
      threads.push(_rubocop fn)
      process(threads,4){failed<<_1}
    end
    process(threads,0){failed<<_1}
    return if failed.empty?
    failed.each{puts _1.red}
    flunk 'Busted by Rubocop!'.red
  end
  private
  def process(threads, n)
    loop do
      while (thread=threads.find{!_1.alive?})
        threads.delete thread
        if (failed=thread.value)
          yield failed
        end
      end
      break if threads.count<=n
      sleep 0.25
    end
  end
  def _rubocop(fn)
    Thread.new do
      system("#{RUBOCOP} #{fn} 2>/dev/null")? nil : fn
    end
  end
  def _bang_ruby?(fn)
    return false if File.directory?(fn) || !File.executable?(fn)
    /^#!.*\bruby$/.match? File.read(fn,80).lines[0].rstrip
  end
end
